// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  email        String   @unique
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         Role     @default(GENERAL)
  accessToken  String?
  refreshToken String?

  PromptRefinements PromptRefinement[]
  Logs              Log[]
  APIKey            APIKey[]
  RateLimit         RateLimit[]
  ComplianceData    ComplianceData[]
}

model PromptRefinement {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  original  String
  refined   String
  userId    String

  User User @relation(fields: [userId], references: [id])
}

model Log {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  message   String
  level     LogLevel
  userId    String?

  User User? @relation(fields: [userId], references: [id])
}

model APIKey {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  key        String   @unique
  createdAt  DateTime @default(now())
  validUntil DateTime
  userId     String

  User User @relation(fields: [userId], references: [id])
}

model RateLimit {
  id       String @id @default(dbgenerated("gen_random_uuid()"))
  endpoint String
  limit    Int
  period   Int // In Seconds
  userId   String

  User User @relation(fields: [userId], references: [id])
}

model ComplianceData {
  id             String         @id @default(dbgenerated("gen_random_uuid()"))
  createdAt      DateTime       @default(now())
  type           ComplianceType
  consentGiven   Boolean
  consentRevoked DateTime?
  userId         String

  User User @relation(fields: [userId], references: [id])
}

enum Role {
  GENERAL
  PREMIUM
  ADMIN
}

enum LogLevel {
  INFO
  ERROR
  DEBUG
}

enum ComplianceType {
  GDPR
  CCPA
}

